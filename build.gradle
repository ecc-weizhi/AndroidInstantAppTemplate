// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.2.51'
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

// Defining variables that can be referenced in other build.gradle file
ext {
    buildToolsVersion = "27.0.3"
    compileSdkVersion = 27
    minSdkVersion = 19
    targetSdkVersion = 27
    versionCode = 14
    versionName = "1.0.0"

    // signing config
    keyStore = "stub"
    keyStorePassword = "stub"
    keyAlias = "stub"
    keyAliasPassword = "stub"

    // dependencies version
    constraintVersion = '1.1.2'
    dagger2Version = '2.13'
    espressoVersion = '3.0.1'
    glideVersion = '4.7.1'
    groupieVersion = '2.1.0'
    instantAppVersion = '1.1.0'
    junitVersion = '4.12'
    kotlinVersion = "$kotlin_version"
    multiDexVersion = '1.0.3'
    retrofit2Version = '2.3.0'
    rxandroidVersion = '2.0.1'
    rxjavaVersion = '2.1.7'
    supportVersion = '27.1.1'
    testVersion = '1.0.1'
    timberVersion = '4.5.1'
}

def props = new Properties()
if (rootProject.file("release.properties").exists()) {
    props.load(new FileInputStream(rootProject.file("release.properties")))
    rootProject.keyStore = props.keyStore
    rootProject.keyStorePassword = props.keyStorePassword
    rootProject.keyAlias = props.keyAlias
    rootProject.keyAliasPassword = props.keyAliasPassword
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}
